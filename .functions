#!/usr/bin/env bash

# create a directory and enters
# usage: mkcd <directory>
mkcd() {
    mkdir -p -- "$1" && cd -P -- "$1"
}

# extracts archived files
# usage: extract <file>
# credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# generate a random password
# usage: gen_pwd OR gen_pwd <length>
gen_pwd() {
    [[ -z "$1" ]] && pwdLen=32 || pwdLen="$1"
    cat /dev/urandom | tr -dc 'a-zA-Z0-9#+.-_!$%&/()[]{}=' | fold -w "$pwdLen" | head -n 1
}

# start an HTTP server from current directory
# usage: server OR server <port>
server() {
    local port="${1:-8080}"
    # set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
    open "http://127.0.0.1:${port}/"
}

if [ -f ~/.functions.local ]; then
    . ~/.functions.local
fi
