#!/usr/bin/env bash

# shell prompt based on https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt [MIT]
prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi

        fi

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi
}

set_prompts() {
    local bold='';
    local reset="\e[0m";
    local black="\e[1;30m";
    local blue="\e[1;34m";
    local cyan="\e[1;36m";
    local green="\e[1;32m";
    local orange="\e[1;33m";
    local purple="\e[1;35m";
    local red="\e[1;31m";
    local violet="\e[1;35m";
    local white="\e[1;37m";
    local yellow="\e[1;33m";

    # Highlight the user name when logged in as root.
    if [[ "$USER" == "root" ]]; then
        local promptSign="#"
        local userStyle="$red";
    else
        local promptSign="$"
        local userStyle="$green";
    fi

    # Highlight the hostname when connected via SSH.
    if [[ "$SSH_TTY" ]]; then
        local hostStyle="$red";
    else
        local hostStyle="$green";
    fi

    # Separator color
    if [[ "$userStyle" == "$hostStyle" ]]; then
        local atStyle="$userStyle";
    else
        local atStyle="$reset";
    fi

    PS1="\[\033]0;\u@\h - \W\007\]"; # set title to working directory base name
    PS1+="\[$userStyle\]\u"; # username
    PS1+="\[$atStyle\]@"; # separator
    PS1+="\[$bold$hostStyle\]\h\[\033[00m\]: "; # host
    PS1+="\[$blue\]\w"; # working directory full path
    PS1+="\$(prompt_git \"\[$reset\] on \[$bold$violet\]\" \"\[$blue\]\")"; # Git repository details
    PS1+="\n\[$reset\]$promptSign \[$reset\]"; # sign
    export PS1;
}

set_prompts
unset set_prompts

PS2="→ ";
export PS2;
